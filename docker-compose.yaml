services:
  nginx:
    build: 
      dockerfile: ./proxy/Dockerfile
      context: .
    image: nginx
    container_name: nginx
    restart: always
    ports:
      - '8080:80'
    volumes:
      - ./web:/usr/share/nginx/html
    depends_on:
      - web
      - api
    # networks:
    #   - nwproject

  database:
    image: postgres:alpine3.19
    container_name: database
    restart: always
    # networks:
    #   - nwproject
    volumes:
      - ./database/volume/:/var/lib/postgresql/data/
    env_file: ./.env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - '5432:5432'
  
  migration:
    build: 
      dockerfile: ./database/Dockerfile.migration
      context: .
    image: migration:v1
    container_name: migration
    # networks:
    #   - nwproject
    volumes:
      - ./database/migrations:/flyway/sql/migrations:rw,z
    env_file: .env
    depends_on:
      - database

  # flyway:
  #   image: flyway/flyway:latest
  #   container_name: flyway
  #   # command: -url=jdbc:mysql://db -schemas=myschema -user=root -password=P@ssw0rd -connectRetries=60 migrate
  #   # networks:
  #   #   - nwproject
  #   volumes:
  #     - ./database/migrations:/flyway/sql/:rw,z
  #   env_file: .env
  #   depends_on:
  #     - database

  web:
    build:
      dockerfile: ./web/Dockerfile
      context: .
    image: frontend:v1
    container_name: web
    ports:
      - '3001:3001'
    # networks:
    #   - nwproject
    # volumes:
    #   - ./volume:/usr/src/app/
    environment:
      - NODE_ENV=dev
    depends_on:
      - database

  api:
    build:
      dockerfile: ./api/Dockerfile
      context: .
    image: backend:v1
    container_name: api
    ports:
      - '4000'
    networks: 
      - nwproject
    depends_on:
      - database

networks:
  nwproject:
    driver: bridge
